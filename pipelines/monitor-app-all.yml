resource_types:
- name: terraformtype
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
      #repository: hashicorp/terraform
    tag: "1.5.1-8500fcc"

resources:
- name: web-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/web-fe
    branch: main

- name: md-mongo-wrapper-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/md-mongo-wrapper
    branch: main

- name: cpu-checker-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/demo-cpu-checker
    branch: main

- name: cputemp-checker-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/demo-cputemp-checker
    branch: main

- name: mem-checker-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/demo-mem-checker
    branch: main

- name: motraffic-checker-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/demo-motraffic-checker
    branch: main

- name: mttraffic-checker-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/demo-mttraffic-checker
    branch: main

- name: disk-checker-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/demo-disk-checker
    branch: main

- name: web-image-docker
  type: registry-image
    #type: docker-image
  icon: docker
  source:
    #email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/web-fe
    tag: latest

- name: md-momngo-wrapper-image-docker
  type: registry-image
  icon: docker
  source:
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/md-mongo-wrapper
    tag: latest

- name: cpu-checker-image-docker
  type: registry-image
  icon: docker
  source:
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/demo-cpu-checker
    tag: latest

- name: cputemp-checker-image-docker
  type: registry-image
  icon: docker
  source:
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/demo-cputemp-checker
    tag: latest

- name: mem-checker-image-docker
  type: registry-image
  icon: docker
  source:
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/demo-mem-checker
    tag: latest

- name: disk-checker-image-docker
  type: registry-image
  icon: docker
  source:
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/demo-disk-checker
    tag: latest

- name: motraffic-checker-image-docker
  type: registry-image
  icon: docker
  source:
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/disk-motraffic-checker
    tag: latest

- name: mttraffic-checker-image-docker
  type: registry-image
  icon: docker
  source:
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/disk-mttraffic-checker
    tag: latest

- name: node-image
  type: registry-image
  source:
    repository: node
    tag: 18

- name: webfe-tf
  type: terraformtype
  check_every : never
  source:
    #env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/webfe-terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
      wrapper_port: ((wrapper_port))
      wrapper_host: ((wrapper_host))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

- name: wrapper-tf
  type: terraformtype
  check_every : never
  source:
    #env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/wrapper-terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
      mongo_user: ((mongo_user))
      mongo_pass: ((mongo_pass))
      mongo_url: ((mongo_url))
    env:
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

- name: cpu-checker-tf
  type: terraformtype
  check_every : never
  source:
    #env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/cpu-checker-terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
      mongo_user: ((mongo_user))
      mongo_pass: ((mongo_pass))
      mongo_url: ((mongo_url))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))
      TF_LOG: DEBUG

- name: cputemp-checker-tf
  type: terraformtype
  check_every : never
  source:
    #env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/cputemp-checker-terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
      mongo_user: ((mongo_user))
      mongo_pass: ((mongo_pass))
      mongo_url: ((mongo_url))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

- name: mem-checker-tf
  type: terraformtype
  check_every : never
  source:
    #env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/mem-checker-terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
      mongo_user: ((mongo_user))
      mongo_pass: ((mongo_pass))
      mongo_url: ((mongo_url))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

- name: disk-checker-tf
  type: terraformtype
  check_every : never
  source:
    #env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/disk-checker-terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
      mongo_user: ((mongo_user))
      mongo_pass: ((mongo_pass))
      mongo_url: ((mongo_url))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

- name: motraffic-checker-tf
  type: terraformtype
  check_every : never
  source:
    #env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/motraffic-checker-terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
      mongo_user: ((mongo_user))
      mongo_pass: ((mongo_pass))
      mongo_url: ((mongo_url))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

- name: mttraffic-checker-tf
  type: terraformtype
  check_every : never
  source:
    #env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/mttraffic-checker-terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
      mongo_user: ((mongo_user))
      mongo_pass: ((mongo_pass))
      mongo_url: ((mongo_url))
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))



jobs:
  ################################################################################################################
  #
  # WEB FE
  #
  ################################################################################################################
- name: build-and-push-web
  public: true
  serial: true
  plan:
  - get: web-repo
    trigger: true
  - task: build-web-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task
      inputs:
      - name: web-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build
        args: 
        - -f web-repo/Dockerfile.dev

  - task: check-web-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt
  - put: web-image-docker
    params: 
      image: image/image.tar

- name: webfe-tf-plan
  public: true
  serial: true
  plan:
  - get: web-repo
    trigger: true
    passed: [build-and-push-web]
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: web-repo
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          pwd
          cd monitor-app-git-repo/terraform
          pwd
          ls -lrt
          env

  - put: webfe-tf
    params:
      env_name: staging
      terraform_source: web-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24

- name: webfe-tf-apply
  plan:
  - get: web-repo
    trigger: true
    passed: [webfe-tf-plan]
  - get: webfe-image-docker
    trigger: true
    passed: [webfe-tf-plan]
  - load_var: version
    file: webfe-image-docker/digest
  - get: webfe-tf
    trigger: true
    passed: [webfe-tf-plan]
  - put: webfe-tf
    params:
      env_name: staging
      terraform_source: web-repo/terraform
      plan_run: true
      docker_sha: ((.:version))

  ################################################################################################################
  #
  # MONGO WRAPPER
  #
  ################################################################################################################
- name: test-wrapper
  public: true
  plan:
  - get: node-image
  - get: md-mongo-wrapper-repo
    trigger: true
  - task: install
    image: node-image
    config:
      inputs:
      - name: md-mongo-wrapper-repo
      outputs:
      - name: dependencies
        path: md-mongo-wrapper-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["install"]
        dir: md-mongo-wrapper-repo
  - task: test
    image: node-image
    config:
      inputs:
      - name: md-mongo-wrapper-repo
      - name: dependencies
        path: md-mongo-wrapper-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["run", "test"]
        dir: md-mongo-wrapper-repo

- name: build-and-push-mongo-wrapper
  public: true
  serial: true
  plan:
  - get: md-mongo-wrapper-repo
    trigger: true
    passed: [test-wrapper]

  - task: build-mongo-wrapper-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task

      inputs:
      - name: md-mongo-wrapper-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build

  - task: check-mongo-wrapper-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt

  - put: md-momngo-wrapper-image-docker
    params: 
      image: image/image.tar

- name: wrapper-tf-plan
  public: true
  serial: true
  plan:
  - get: md-mongo-wrapper-repo
    trigger: true
    passed: [build-and-push-mongo-wrapper]
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: md-mongo-wrapper-repo
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          pwd
          cd md-mongo-wrapper-repo/terraform
          pwd
          ls -lrt
          env

  - put: wrapper-tf
    params:
      env_name: staging
      terraform_source: md-mongo-wrapper-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24

- name: wrapper-tf-apply
  plan:
  - get: md-mongo-wrapper-repo
    trigger: false
    passed: [wrapper-tf-plan]
  - get: wrapper-image-docker
    trigger: true
    passed: [wrapper-tf-plan]
  - load_var: version
    file: wrapper-image-docker/digest
  - get: wrapper-tf
    trigger: true
    passed: [wrapper-tf-plan]
  - put: wrapper-tf
    params:
      env_name: staging
      terraform_source: md-mongo-wrapper-repo/terraform
      plan_run: true
      docker_sha: ((.:version))

  ################################################################################################################
  #
  # CPU CHECKER
  #
  ################################################################################################################
- name: test-cpu-checker
  public: true
  plan:
  - get: node-image
  - get: cpu-checker-repo
    trigger: true
  - task: install
    image: node-image
    config:
      inputs:
      - name: cpu-checker-repo
      outputs:
      - name: dependencies
        path: cpu-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["install"]
        dir: cpu-checker-repo
  - task: test
    image: node-image
    config:
      inputs:
      - name: cpu-checker-repo
      - name: dependencies
        path: cpu-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["run", "test"]
        dir: cpu-checker-repo

- name: build-and-push-cpu-checker
  public: true
  serial: true
  plan:
  - get: cpu-checker-repo
    trigger: true
    passed: [test-cpu-checker]

  - task: build-cpu-checker-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task

      inputs:
      - name: cpu-checker-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build

  - task: check-cpu-checker-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt
          cat digest

  - put: cpu-checker-image-docker
    params: 
      image: image/image.tar
        #outputs:
        #- digest: my_sha


- name: cpu-checker-tf-plan
  public: true
  serial: true
  plan:
  - get: cpu-checker-repo
    trigger: true
    passed: [build-and-push-cpu-checker]
  - get: cpu-checker-image-docker
    trigger: true
    passed: [build-and-push-cpu-checker]
  - load_var: version
    file: cpu-checker-image-docker/digest
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: cpu-checker-repo
      - name: cpu-checker-image-docker
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          ls -lrt cpu-checker-image-docker
          pwd
          cd cpu-checker-repo/terraform
          pwd
          ls -lrt
          env
  - put: cpu-checker-tf
    params:
      env_name: staging
      delete_on_failure: true
      terraform_source: cpu-checker-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24
        docker_sha: ((.:version))

- name: cpu-checker-tf-apply
  plan:
  - get: cpu-checker-repo
    trigger: false
    passed: [cpu-checker-tf-plan]
  - get: cpu-checker-image-docker
    trigger: true
    passed: [cpu-checker-tf-plan]
  - load_var: version
    file: cpu-checker-image-docker/digest
  - get: cpu-checker-tf
    trigger: true
    passed: [cpu-checker-tf-plan]
  - put: cpu-checker-tf
    params:
      env_name: staging
      terraform_source: cpu-checker-repo/terraform
      plan_run: true
      docker_sha: ((.:version))
#      MONGODB_USER: ((mongo_user))
#      MONGODB_PASSWORD: ((mongo_pass))
#      MONGODB_URI: ((mongo_url))
#      mongo_user: ((mongo_user))
#      mongo_pass: ((mongo_pass))
#      mongo_url: ((mongo_url))

  ################################################################################################################
  #
  # CPUTEMP CHECKER
  #
  ################################################################################################################
- name: test-cputemp-checker
  public: true
  plan:
  - get: node-image
  - get: cputemp-checker-repo
    trigger: true
  - task: install
    image: node-image
    config:
      inputs:
      - name: cputemp-checker-repo
      outputs:
      - name: dependencies
        path: cputemp-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["install"]
        dir: cputemp-checker-repo
  - task: test
    image: node-image
    config:
      inputs:
      - name: cputemp-checker-repo
      - name: dependencies
        path: cputemp-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["run", "test"]
        dir: cputemp-checker-repo

- name: build-and-push-cputemp-checker
  public: true
  serial: true
  plan:
  - get: cputemp-checker-repo
    trigger: true
    passed: [test-cputemp-checker]

  - task: build-cputemp-checker-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task

      inputs:
      - name: cputemp-checker-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build

  - task: check-cputemp-checker-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt

  - put: cputemp-checker-image-docker
    params: 
      image: image/image.tar

- name: cputemp-checker-tf-plan
  public: true
  serial: true
  plan:
  - get: cputemp-checker-repo
    trigger: true
    passed: [build-and-push-cputemp-checker]
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: cputemp-checker-repo
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          pwd
          cd cputemp-checker-repo/terraform
          pwd
          ls -lrt
          env

  - put: cputemp-checker-tf
    params:
      env_name: staging
      terraform_source: cputemp-checker-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24

- name: cputemp-checker-tf-apply
  plan:
  - get: cputemp-checker-repo
    trigger: false
    passed: [cputemp-checker-tf-plan]
  - get: cputemp-checker-image-docker
    trigger: true
    passed: [cputemp-checker-tf-plan]
  - load_var: version
    file: cputemp-checker-image-docker/digest
  - get: cputemp-checker-tf
    trigger: true
    passed: [cputemp-checker-tf-plan]
  - put: cputemp-checker-tf
    params:
      env_name: staging
      terraform_source: cputemp-checker-repo/terraform
      plan_run: true
      docker_sha: ((.:version))

  ################################################################################################################
  #
  # MEM CHECKER
  #
  ################################################################################################################
- name: test-mem-checker
  public: true
  plan:
  - get: node-image
  - get: mem-checker-repo
    trigger: true
  - task: install
    image: node-image
    config:
      inputs:
      - name: mem-checker-repo
      outputs:
      - name: dependencies
        path: mem-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["install"]
        dir: mem-checker-repo
  - task: test
    image: node-image
    config:
      inputs:
      - name: mem-checker-repo
      - name: dependencies
        path: mem-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["run", "test"]
        dir: mem-checker-repo

- name: build-and-push-mem-checker
  public: true
  serial: true
  plan:
  - get: mem-checker-repo
    trigger: true
    passed: [test-mem-checker]

  - task: build-mem-checker-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task

      inputs:
      - name: mem-checker-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build

  - task: check-mem-checker-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt

  - put: mem-checker-image-docker
    params: 
      image: image/image.tar

- name: mem-checker-tf-plan
  public: true
  serial: true
  plan:
  - get: mem-checker-repo
    trigger: true
    passed: [build-and-push-mem-checker]
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: mem-checker-repo
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          pwd
          cd mem-checker-repo/terraform
          pwd
          ls -lrt
          env

  - put: mem-checker-tf
    params:
      env_name: staging
      terraform_source: mem-checker-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24

- name: mem-checker-tf-apply
  plan:
  - get: mem-checker-repo
    trigger: false
    passed: [mem-checker-tf-plan]
  - get: mem-checker-image-docker
    trigger: true
    passed: [mem-checker-tf-plan]
  - load_var: version
    file: mem-checker-image-docker/digest
  - get: mem-checker-tf
    trigger: true
    passed: [mem-checker-tf-plan]
  - put: mem-checker-tf
    params:
      env_name: staging
      terraform_source: mem-checker-repo/terraform
      plan_run: true
      docker_sha: ((.:version))

  ################################################################################################################
  #
  # DISK CHECKER
  #
  ################################################################################################################
- name: test-disk-checker
  public: true
  plan:
  - get: node-image
  - get: disk-checker-repo
    trigger: true
  - task: install
    image: node-image
    config:
      inputs:
      - name: disk-checker-repo
      outputs:
      - name: dependencies
        path: disk-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["install"]
        dir: disk-checker-repo
  - task: test
    image: node-image
    config:
      inputs:
      - name: disk-checker-repo
      - name: dependencies
        path: disk-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["run", "test"]
        dir: disk-checker-repo

- name: build-and-push-disk-checker
  public: true
  serial: true
  plan:
  - get: disk-checker-repo
    trigger: true
    passed: [test-disk-checker]

  - task: build-disk-checker-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task

      inputs:
      - name: disk-checker-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build

  - task: check-disk-checker-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt

  - put: disk-checker-image-docker
    params: 
      image: image/image.tar

- name: disk-checker-tf-plan
  public: true
  serial: true
  plan:
  - get: disk-checker-repo
    trigger: true
    passed: [build-and-push-disk-checker]
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: disk-checker-repo
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          pwd
          cd disk-checker-repo/terraform
          pwd
          ls -lrt
          env

  - put: disk-checker-tf
    params:
      env_name: staging
      terraform_source: disk-checker-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24

- name: disk-checker-tf-apply
  plan:
  - get: disk-checker-repo
    trigger: false
    passed: [disk-checker-tf-plan]
  - get: disk-checker-image-docker
    trigger: true
    passed: [disk-checker-tf-plan]
  - load_var: version
    file: disk-checker-image-docker/digest
  - get: disk-checker-tf
    trigger: true
    passed: [disk-checker-tf-plan]
  - put: disk-checker-tf
    params:
      env_name: staging
      terraform_source: disk-checker-repo/terraform
      plan_run: true
      docker_sha: ((.:version))

  ################################################################################################################
  #
  # MOTRAFFIC CHECKER
  #
  ################################################################################################################
- name: test-motraffic-checker
  public: true
  plan:
  - get: node-image
  - get: motraffic-checker-repo
    trigger: true
  - task: install
    image: node-image
    config:
      inputs:
      - name: motraffic-checker-repo
      outputs:
      - name: dependencies
        path: motraffic-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["install"]
        dir: motraffic-checker-repo
  - task: test
    image: node-image
    config:
      inputs:
      - name: motraffic-checker-repo
      - name: dependencies
        path: motraffic-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["run", "test"]
        dir: motraffic-checker-repo

- name: build-and-push-motraffic-checker
  public: true
  serial: true
  plan:
  - get: motraffic-checker-repo
    trigger: true
    passed: [test-motraffic-checker]

  - task: build-motraffic-checker-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task

      inputs:
      - name: motraffic-checker-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build

  - task: check-motraffic-checker-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt

  - put: motraffic-checker-image-docker
    params: 
      image: image/image.tar

- name: motraffic-checker-tf-plan
  public: true
  serial: true
  plan:
  - get: motraffic-checker-repo
    trigger: true
    passed: [build-and-push-motraffic-checker]
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: motraffic-checker-repo
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          pwd
          cd motraffic-checker-repo/terraform
          pwd
          ls -lrt
          env

  - put: motraffic-checker-tf
    params:
      env_name: staging
      terraform_source: motraffic-checker-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24

- name: motraffic-checker-tf-apply
  plan:
  - get: motraffic-checker-repo
    trigger: false
    passed: [motraffic-checker-tf-plan]
  - get: motraffic-checker-image-docker
    trigger: true
    passed: [motraffic-checker-tf-plan]
  - load_var: version
    file: motraffic-checker-image-docker/digest
  - get: motraffic-checker-tf
    trigger: true
    passed: [motraffic-checker-tf-plan]
  - put: motraffic-checker-tf
    params:
      env_name: staging
      terraform_source: motraffic-checker-repo/terraform
      plan_run: true
      docker_sha: ((.:version))

  ################################################################################################################
  #
  # MTTRAFFIC CHECKER
  #
  ################################################################################################################
- name: test-mttraffic-checker
  public: true
  plan:
  - get: node-image
  - get: mttraffic-checker-repo
    trigger: true
  - task: install
    image: node-image
    config:
      inputs:
      - name: mttraffic-checker-repo
      outputs:
      - name: dependencies
        path: mttraffic-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["install"]
        dir: mttraffic-checker-repo
  - task: test
    image: node-image
    config:
      inputs:
      - name: mttraffic-checker-repo
      - name: dependencies
        path: mttraffic-checker-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["run", "test"]
        dir: mttraffic-checker-repo

- name: build-and-push-mttraffic-checker
  public: true
  serial: true
  plan:
  - get: mttraffic-checker-repo
    trigger: true
    passed: [test-mttraffic-checker]
  - task: build-mttraffic-checker-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task
      inputs:
      - name: mttraffic-checker-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build

  - task: check-mttraffic-checker-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt

  - put: mttraffic-checker-image-docker
    params: 
      image: image/image.tar

- name: mttraffic-checker-tf-plan
  public: true
  serial: true
  plan:
  - get: mttraffic-checker-repo
    trigger: true
    passed: [build-and-push-mttraffic-checker]
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: mttraffic-checker-repo
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          pwd
          cd mttraffic-checker-repo/terraform
          pwd
          ls -lrt
          env

  - put: mttraffic-checker-tf
    params:
      env_name: staging
      terraform_source: mttraffic-checker-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24

- name: mttraffic-checker-tf-apply
  plan:
  - get: mttraffic-checker-repo
    trigger: false
    passed: [mttraffic-checker-tf-plan]
  - get: mttraffic-checker-image-docker
    trigger: true
    passed: [mttraffic-checker-tf-plan]
  - load_var: version
    file: mttraffic-checker-image-docker/digest
  - get: mttraffic-checker-tf
    trigger: true
    passed: [mttraffic-checker-tf-plan]
  - put: mttraffic-checker-tf
    params:
      env_name: staging
      terraform_source: mttraffic-checker-repo/terraform
      plan_run: true
      docker_sha: ((.:version))

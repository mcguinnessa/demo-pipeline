resource_types:
- name: terraformtype
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
      #repository: hashicorp/terraform
    tag: "1.5.1-8500fcc"

resources:
- name: web-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/web-fe
    branch: main

- name: md-mongo-wrapper-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/md-mongo-wrapper
    branch: main

- name: web-image-docker
  type: registry-image
    #type: docker-image
  icon: docker
  source:
    #email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/web-fe
    tag: latest

- name: md-momngo-wrapper-image-docker
  type: registry-image
    #type: docker-image
  icon: docker
  source:
    #email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/md-mongo-wrapper
    tag: latest

- name: node-image
  type: registry-image
  source:
    repository: node
    tag: 18

- name: webfe-terraform
  type: terraformtype
  check_every : never
  source:
    #env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/webfe-terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))


jobs:
- name: build-and-push-web
  public: true
  serial: true
  plan:
  - get: web-repo
    trigger: true

  - task: build-web-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task

      inputs:
      - name: web-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build
        args: 
        - -f web-repo/Dockerfile.dev

  - task: check-web-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt

  - put: web-image-docker
    params: 
      image: image/image.tar

- name: webfe-terraform-plan
  public: true
  serial: true
  plan:
  - get: web-repo
    trigger: true
    passed: [build-and-push-web]
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: web-repo
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          pwd
          cd monitor-app-git-repo/terraform
          pwd
          ls -lrt
          env

  - put: webfe-terraform
    params:
      env_name: staging
      terraform_source: web-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24

- name: webfe-terraform-apply
  plan:
  - get: web-repo
    trigger: false
    passed: [webfe-terraform-plan]
  - get: webfe-terraform
    trigger: true
    passed: [webfe-terraform-plan]
  - put: webfe-terraform
    params:
      env_name: staging
      terraform_source: web-repo/terraform
      plan_run: true



- name: test-wrapper
  public: true
  plan:
  - get: node-image
  - get: md-mongo-wrapper-repo
    trigger: true
  - task: install
    image: node-image
    config:
      inputs:
      - name: md-mongo-wrapper-repo
      outputs:
      - name: dependencies
        path: md-mongo-wrapper-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["install"]
        dir: md-mongo-wrapper-repo
  - task: test
    image: node-image
    config:
      inputs:
      - name: md-mongo-wrapper-repo
      - name: dependencies
        path: md-mongo-wrapper-repo/node_modules
      platform: linux
      run:
        path: npm
        args: ["run", "test"]
        dir: md-mongo-wrapper-repo

- name: build-and-push-mongo-wrapper
  public: true
  serial: true
  plan:
  - get: md-mongo-wrapper-repo
    trigger: true
    passed: [test-wrapper]

  - task: build-mongo-wrapper-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task

      inputs:
      - name: md-mongo-wrapper-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build

  - task: check-mongo-wrapper-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt

  - put: md-momngo-wrapper-image-docker
    params: 
      image: image/image.tar

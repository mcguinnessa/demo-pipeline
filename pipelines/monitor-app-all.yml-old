
resource_types:
- name: terraformtype
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: "1.4.6-11d9d59"

resources:
- name: monitor-app-git-repo
  type: git
  icon: github
  source:
    uri: https://github.com/mcguinnessa/monitor-demo
    branch: main

- name: monitor-app-image
  type: registry-image
    #type: docker-image
  icon: docker
  source:
    #email: ((docker-hub-email))
    username: ((docker-hub-username))
    password: ((docker-hub-password))
    repository: ((docker-hub-username))/pipeline-tutorial-monitor-app
    tag: latest

- name: terraform
  type: terraformtype
  source:
    env_name: staging
    backend_type: s3
    backend_config:
      bucket: adm-monitor-demo-s3bucket
      key: adm/terraform.tfstate
      region: eu-west-2
      access_key: ((aws_access_key))
      secret_key: ((aws_secret_key))
    vars:
      tag_name: concourse
    env:
      AWS_ACCESS_KEY_ID: ((aws_access_key))
      AWS_SECRET_ACCESS_KEY: ((aws_secret_key))

jobs:
- name: build-and-push
  public: true
  serial: true
  plan:
  - get: monitor-app-git-repo
    trigger: true
  - task: build-image
    #This allows it to do privileged things, like mount
    privileged: true
    config:
      platform: linux

      image_resource:
        type: registry-image
        source:
          repository: concourse/oci-build-task

      inputs:
      - name: monitor-app-git-repo
        path: .
      outputs:
      - name: image
        #      params:
        #CONTEXT: monitor-app-git-repo
      run:
        path: build

  - task: check-build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine

      inputs:
      - name: image
      run:
        path: /bin/sh
        args:
        - -c
        - | 
          ls -lrt 
          pwd
          cd image
          pwd
          ls -lrt

  - put: monitor-app-image
    params: 
      image: image/image.tar

- name: terraform-plan
  public: true
  serial: true
  plan:
  - get: monitor-app-git-repo
    trigger: true
    passed: [build-and-push]
  - task: check-source
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      inputs:
      - name: monitor-app-git-repo
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -lrt
          pwd
          cd monitor-app-git-repo/terraform
          pwd
          ls -lrt
          env

  - put: terraform
    params:
      env_name: staging
      terraform_source: monitor-app-git-repo/terraform
      plan_only: true
      vars:
        subnet_cidr: 10.0.1.0/24

- name: terraform-apply
  plan:
  - get: monitor-app-git-repo
    trigger: false
    passed: [terraform-plan]
  - get: terraform
    trigger: true
    passed: [terraform-plan]
  - put: terraform
    params:
      env_name: staging
      terraform_source: monitor-app-git-repo/terraform
      plan_run: true

